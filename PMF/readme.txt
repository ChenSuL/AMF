----------------------------------------------------------------------------
README file for PMF
----------------------------------------------------------------------------

Author: Jamie Zhu <jimzhu@GitHub>
Last updated: 2014/6/26.

This package implements a QoS prediction approach, probabilistic matrix 
factorization (PMF), which has been employed as a baseline approach 
for comparison in the existing work [Zheng et al., TSC'13] 

The implementations are based on a combination of Python (2.7) and C++ 
programming languages, in order to achieve both speed and simplicity. To do 
so, Cython (http://cython.org/) is used. The core algorithms are implemented 
using C++, and we obtain a large speedup than pure Python implementation. 

You can refer to the README.md of WSRec repository for instructions of
installing Cython. But you do not need it if you only want to reproduce the 
experimental results by executing the scripts that I have provided (You may 
even not need any execution because I have also provided most of the results). 
Cython is only needed when you modify the c++ source files and want to 
re-compile them. In addition, it is worth noting that our implementation is 
also based on numpy and scipy packages (http://www.scipy.org/), so you would 
also need to install these packages first.

----------------------------------------------------------------------------
List of contents of package
----------------------------------------------------------------------------

PMF/
  - run_rt.py                 - script file for running the experiments on 
                                response-time QoS data 
  - run_tp.py                 - script file for running the experiments on 
                                throughput QoS data
  - setup.py                  - setup script file for build c++ modules
  - readme.txt                - descriptions of this package 
  - src/                      - directory of the source files
      - utilities.py          - a script containing a bag of useful utilities
      - predict.py            - control execution and results collection of  
                                the specific algorithm
      - PMF.so                - the external module built from C++ 
                                implementations from "PMF_core/"
      - PMF_core/             - directory of c++ implementation of PMF
          - PMF_core.h        - header file
          - PMF_core.cpp      - source file
          - PMF.pyx           - a python wrapper written in Cython for C++ 
                                functions 
          - PMF.cpp           - This file is automatically generated by Cython 
                                for building PMF.so
  - scripts/
      - resultHandler.py      - a script file to compute the average values of 
                                the raw results in "result/"
  - result/                   - directory for storing evaluation results
                                available metrics: (MAE, NMAE, RMSE, MRE, NPRE)
      - 01_rtResult_0.05.txt  - E.g., the reponse-time prediction result with 
                                20 runs, performed for time slice = 01, under 
                                matrix density = 5%
      - [...]                 - many other results
	  - average/
          - avg_rtResult_0.05.txt  - the average result over 64 time slices
          - [...]                  - results for other densities
		  
----------------------------------------------------------------------------
Using the package
----------------------------------------------------------------------------

For ease of reproducing and compare with other approaches, we provide the 
detailed experimental results with five metrics (MAE, NMAE, RMSE, MRE, NPRE), 
under the "result/" directory, after running the above five QoS prediction 
approaches on "data/". E.g.,"result/average/avg_rtResult_0.05.txt" records the 
evaluation results under matrix density = 5%. In particular, each experiment 
under each time slice is run for 20 times and the average result (including 
std value) over 20*64 runs is reported. These results can be directly used 
for your research work.

On the other hand, if you want to reproduce our experiments, you can run the 
program with our provided Python scripts "run_rt.py" and "run_tp.py".

>> python run_rt.py
>> python run_tp.py

Make sure the external module "PMF.so" exists. If not, you can build it by 
the follow command. Note that the current version only works on Linux.

>> python setup.py build_ext --inplace

----------------------------------------------------------------------------
Reference paper
----------------------------------------------------------------------------

Please refer to the following papers for the detailed descriptions of the 
implemented algorithms:

- Zibin Zheng, Hao Ma, M.R. Lyu, and Irwin King, "Collaborative Web Service 
  QoS Prediction via Neighbourhood Integrated Matrix Factorization," IEEE 
  Transactions on Service Computing (TSC), vol. 6, no. 3, 2013, pp. 289-299. 
 
- R. Salakhutdinov and A. Mnih, "Probabilistic Matrix Factorization," in Proc. 
  of Advances in Neural Information Processing Systems (NIPS'07), pp. 1257-1264, 
  2007.

IF YOU USE THIS PACKAGE IN PUBLISHED RESEARCH, PLEASE CITE THE ABOVE PAPERS. 
THANKS!

----------------------------------------------------------------------------
Issues
----------------------------------------------------------------------------

In case of questions or problems, please do not hesitate to report to our 
issue page (https://github.com/WS-DREAM/AMF_Pack/issues). We will help ASAP. 
In addition, we will appreciate any contribution to refine and optimize this 
package.

----------------------------------------------------------------------------
Copyright
----------------------------------------------------------------------------

This software and data is provided as-is, and there are no guarantees
that it fits your purposes or that it is bug-free. It is only freely available 
for research purposes. Downloading and using the package will indicate your 
acceptance to enter into a GNU General Public License agreement. 
Redistribution of this package to any other third party or over the Web is 
not permitted.

